//解法一.快速排序 分治法
//1.给出一个数组内的随机数 无限循环划分区域 直到找到对应大小的数
//2.无需最后排序完毕再取对应数，在每次分组结束后检查是否是对应序号数即可（该数前方比它都小后方比它都大）
//解法二.优先队列
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        if (nums.size() == 0 || nums.size() < k) {
            return -1;
        }
        // rand() % nums;
        int target = nums.size() - k;
        int left = 0;
        int right = nums.size() - 1;
        while (true) {
            int pivot = partitions(nums, left, right);
            if (pivot == target) {
                return nums[pivot];
            } else if (pivot < target) {
                left = pivot + 1;
            } else if (pivot > target) {
                right = pivot - 1;
            }
        }
             
    }

      int partitions(vector<int>& nums, int left, int right) {
        int randomIndex = left + rand() % (right - left + 1);
        swapNums(nums, left , randomIndex);
        int start = left + 1;
        int end = right;
        int pivotValue = nums[left];
        while (true) {
            while (start <= end && nums[start] < pivotValue) {
                start++;
            }

            while (start <= end && nums[end] > pivotValue) {
                end--;
            }

            if (start >= end) {
                break;
            }            

            swapNums(nums, start , end);
            start++;
            end--;
        }
             
        swapNums(nums, left , end);
        return end;
      }

      void swapNums(vector<int>& nums, int left, int right) {
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
      }

};
