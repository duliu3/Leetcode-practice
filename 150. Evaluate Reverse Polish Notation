class Solution {
    template<typename Fn>
    void eval(stack<int>& st, Fn fn) {
        int64_t rhs = st.top(); st.pop();
        int64_t lhs = st.top(); st.pop();
        st.push(fn(lhs, rhs));
    }
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> st;
        for (const string& tk : tokens) {
            if (tk == "+") {
                eval(st, [](int lhs, int rhs){ return lhs+rhs;});
            } else if (tk == "-") {
                eval(st, [](int lhs, int rhs){ return lhs-rhs;});
            } else if (tk == "*") {
                eval(st, [](int lhs, int rhs){ return lhs*rhs;});
            } else if (tk == "/") {
                eval(st, [](int lhs, int rhs){ return lhs/rhs;});
            } else {
                st.push(stoi(tk));
            }
        }
        return st.top();
    }
};

// solution 2
// class Solution {
// public:
//     int evalRPN(vector<string>& tokens) {
//         stack<long> st;
//         for(auto s:tokens)
//         {
//             if(s=="+" || s=="-"|| s=="/"|| s=="*")
//             {
//                 long x=st.top();
//                 st.pop();
//                 long y=st.top();
//                 st.pop();
//                 if(s == "+")
//                 {
//                     st.push(y+x);
//                 }
//                 else if(s == "-")
//                 {
//                     st.push(y-x);
//                 }
//                 else if(s == "*")
//                 {
//                     st.push(y*x);
//                 }
//                 else
//                 {
//                     st.push(y/x);
//                 }
//             }
//             else
//             {
//                 int n=stoi(s);
//                 st.push(n);
//             }
//         }
//         return st.top();
//     }
// };
