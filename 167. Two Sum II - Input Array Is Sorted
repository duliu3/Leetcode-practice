// class Solution {
// public:
//   int search(int target, int left, int right, vector<int>& numbers) {
// 			while (left <= right) {
// 				int middle = left + (right - left)/2;
// 				if (target > numbers[middle]) {
// 						left = middle + 1;
// 				} else if (target < numbers[middle]) {
// 						right = middle - 1;
// 				} else {
// 					return middle;
// 				}
// 			}
// 			return -1;
// 	}

// 	 vector<int> twoSum(vector<int>& numbers, int target) {
//         vector<int> ans;
// 				for (int i = 0; i < numbers.size() - 1; i++) {
// 					int result = search(target - numbers[i], i+1, numbers.size() - 1, numbers);
// 					if (result != -1) {
// 						ans.push_back(i+1);
// 						ans.push_back(result+1);
// 						return ans;
// 					}
// 				} 
// 			return ans;
// 	}
// };

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> ans;
	int start = 0, end = numbers.size()-1;
	while (start < end) {
		int result = numbers[start] + numbers[end];
		if (result > target) {
			end--;
		} else if (result < target) {
			start++;
		} else {
			ans.push_back(start+1);
			ans.push_back(end+1);
			return ans;
		}
	
	}
	return ans;
    }
};
