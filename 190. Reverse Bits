class Solution {

public:
    uint32_t reverseBits(uint32_t n) {
// 首先，定义了一个名为reverseBits的函数，它接受一个无符号32位整数作为参数，并返回一个无符号32位整数。

// 在函数内部，定义了一个变量x，用于存储反转后的结果，初始化为0。

// 定义了一个变量d，用于表示当前位的位置，初始化为0。

// 使用一个循环来进行位操作，直到输入的整数n变为0为止。

// 在循环中，首先计算n的最低位（即二进制表示的最右边一位），并将其左移（<<）到正确的位置（从最高位开始），然后加到x上。

// 将n右移一位（>>），相当于将已经处理过的最低位去掉。

// 递增d，表示下一个要处理的位的位置。

// 当循环结束后，返回结果x，即为反转后的结果。
        uint32_t x = 0;
        int d = 0;
        while(n>0){
            x+=(n%2) << (31-d);
            n >>= 1;
            d++;
        }
        return x;
    }
};
